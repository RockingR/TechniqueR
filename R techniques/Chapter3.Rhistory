varying=list(c("y1", "y2", "y3", "y4"),
c("t1", "t2", "t3", "t4")),
direction="wide")
getwd()
list.files()
setwd("C:/Users/Natusme/Desktop/TechniqueR/R primer")
?sample
?table
HairEyeColor
str(HairEyeColor)
install.packages("epitools")
f <- factor(c(1:4, "A", 8, NA, "B"))
f
as.numeric(levels(f))
vect <- as.numeric(levels(f))[f]
vect
as.numeric(f)
?by
?text
?mtext
demo(plotmath)
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
plot(x, sin(x), type="l", ylim=c(-1, 2.5),
xlab=expression(paste("Concentration ", mu[i])))
title(expression(paste("This looks like ", Gamma,
# Place equations at specific positions
text(4, 1.5, expression(hat(x) == sqrt(x)))
text(1.6, -.5, expression(paste(plain(sin)(x) ==
sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
n==0, infinity))))
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
plot(x, sin(x), type="l", ylim=c(-1, 2.5),
xlab=expression(paste("Concentration ", mu[i])))
title(expression(paste("This looks like ", Gamma,
# Place equations at specific positions
text(4, 1.5, expression(hat(x) == sqrt(x)))
text(1.6, -.5, expression(paste(plain(sin)(x) ==
sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
n==0, infinity))))
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
plot(x, sin(x), type="l", ylim=c(-1, 2.5),
xlab=expression(paste("Concentration ", mu[i])))
# title(expression(paste("This looks like ", Gamma,
#                        # Place equations at specific positions
#                        text(4, 1.5, expression(hat(x) == sqrt(x)))
#                        text(1.6, -.5, expression(paste(plain(sin)(x) ==
#                                                 sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
#                                                              n==0, infinity))))
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
plot(x, sin(x), type="l", ylim=c(-1, 2.5),
xlab=expression(paste("Concentration ", mu[i])))
# title(expression(paste("This looks like ", Gamma,
#                        # Place equations at specific positions
#                        text(4, 1.5, expression(hat(x) == sqrt(x)))
#                        text(1.6, -.5, expression(paste(plain(sin)(x) ==
#                                                 sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
#                                                              n==0, infinity))))
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
# plot(x, sin(x), type="l", ylim=c(-1, 2.5),
#      xlab=expression(paste("Concentration ", mu[i])))
lines(x, sqrt(x), lty=2)
# title(expression(paste("This looks like ", Gamma,
#                        # Place equations at specific positions
#                        text(4, 1.5, expression(hat(x) == sqrt(x)))
#                        text(1.6, -.5, expression(paste(plain(sin)(x) ==
#                                                 sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
#                                                              n==0, infinity))))
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
# plot(x, sin(x), type="l", ylim=c(-1, 2.5),
#      xlab=expression(paste("Concentration ", mu[i])))
lines(x, sqrt(x), lty=2)
title(expression(paste("This looks like ", Gamma,
# Place equations at specific positions
text(4, 1.5, expression(hat(x) == sqrt(x)))
text(1.6, -.5, expression(paste(plain(sin)(x) ==
sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
n==0, infinity))))
x <- seq(0, 5, .1)
# Plot sine and square root curve and add x axis label
# plot(x, sin(x), type="l", ylim=c(-1, 2.5),
#      xlab=expression(paste("Concentration ", mu[i])))
lines(x, sqrt(x), lty=2)
title(expression(paste("This looks like ", Gamma,
# Place equations at specific positions
text(4, 1.5, expression(hat(x) == sqrt(x)))
text(1.6, -.5, expression(paste(plain(sin)(x) ==
sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
n==0, infinity)))))))
text(4, 1.5, expression(hat(x) == sqrt(x)))
n==0, infinity))))
?title
title(expression(paste("This looks like ", Gamma "to me")
title(expression(paste("This looks like ", Gamma "to me")))
title(expression(paste("This looks like ", Gamma, "to me")))
title(expression(paste("This looks like ", Gamma, " to me")))
x <- seq(0, 5, .1)
plot(x, sin(x), type="l", ylim=c(-1, 2.5),
xlab=expression(paste("Concentration ", mu[i])))
title(expression(paste("This looks like ", Gamma, " to me")))
text(4, 1.5, expression(hat(x) == sqrt(x)))
lines(x, sqrt(x), lty=2)
text(1.6, -.5, expression(paste(plain(sin)(x) ==
sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
n==0, infinity)))
text(1.6, -.5, expression(paste(plain(sin)(x) ==
sum(frac((-1)^n, paste((2*n+1), plain("!")))*x^(2*n+1),
n==0, infinity)))
"#0A141E"
plot(1:10, col="#0A141E")
plot(1:10, col="#0A141E")
?plot
?pairs
?par
?barplot
?barplot2
library(gplots)
?barplots
?plotCI
?axis
install.packages(plotrix)
install.packages("plotrix")
?pyramid.plot
??pyramid.plot
setwd("C:/Users/Natusme/Desktop/TechniqueR/R primer")
getwd()
source("pastePercent.R")
setwd("C:/Users/Natusme/Desktop/TechniqueR/R primer")
getwd()
getwd()
getwd()
ls()
ls()
list.files()
?'f'
?"f"
?`f`
if(client=='private'){
tot.price <- net.price * 1.12      # 12% VAT
} else {
if(client=='public'){
tot.price <- net.price * 1.06    # 6% VAT
} else {
tot.price <- net.price * 1    # 0% VAT
}
}
numeric(0)
VAT <- numeric(0)
VAT
numeric
seq_along
?seq_along
seq_along(c(1, 2, 3, 6))
seq.int(c(1, 2, 3, 6))
seq_len(c(1, 2, 3, 6))
seq_len
logit <- function(x){
x <- ifelse(x < 0 | x > 1, "NA", x) # if x <- NA occurs, log(x/(1-x)) will error
log(x / (1 - x) )
}
logitpercent <- function(x){
x <- gsub("%", "", x)
#  x
logit(as.numeric(x))
}
logitpercent('50%')
debug(logit)
logitpercent('50%')
debug(logit)
logitpercent('50%')
str(x)
logit <- function(x){
x <- ifelse(x < 0 | x > 1, "NA", x)
browser()
log(x / (1 - x) )
}
logit(50)
logit <- function(x){
if( any(x < 0 | x > 1) ) stop('x not between 0 and 1')
# With the if() statement, you test whether any value in x lies between 0 and 1.
# Using the any() function around the condition allows your code to work with complete vectors at once, instead of with single values.
log(x / (1 - x) )
}
logitpercent(c('50%','150%'))
logit <- function(x){
if( any(x < 0 | x > 1) ) stop('x not between 0 and 1')
# With the if() statement, you test whether any value in x lies between 0 and 1.
# Using the any() function around the condition allows your code to work with complete vectors at once, instead of with single values.
log(x / (1 - x) )
}
logitpercent(c('50%','150%'))
logit <- function(x){
x <- ifelse(x < 0 | x > 1, NA, x )
if( any(is.na(x)) ) warning('x not between 0 and 1')
log(x / (1 - x) )
}
logitpercent(c('50%','150%'))
rowsum.df <- function(x){
id <- sapply(x,is.numeric)
rowSums(x[, id])
}
rowsum.df(sleep)
rowsum.df(sleep)
rowsum.df(sleep)
rowsum.df <- function(x){
id <- sapply(x,is.numeric)
rowSums(x[, id])
}
rowsum.df(sleep)
sleep
sapply(sleep,is.numeric)
sapply(sleep,is.numeric)
debug(rowSums)
rowsum.df(sleep)
rowsum.df <- function(x){
id <- sapply(x,is.numeric)
rowSums(x[, id])
}
rowsum.df(sleep)
undebug()
undebug(rowSums)
rowsum.df <- function(x){
id <- sapply(x,is.numeric)
rowSums(x[, id])
}
rowsum.df(sleep)
rowsum.df <- function(x){
id <- sapply(x,is.numeric)
rowSums(x[, id])
}
rowsum.df(sleep)
sleep[, sapple(sleep, is.numeric)]
sleep[, sapply(sleep, is.numeric)]
sapply(sleep,is.numeric)
sleep
rowsum.df <- function(x){
id <- sapply(x,is.numeric)
rowSums(x[, id])
}
rowsum.df(sleep)
mtcars$cyl
cyl.factor <- as.factor(mtcars$cyl)
cyl.factor
levels(cyl.factor)
as.numeric(levels(cyl.factor))
as.numeric(levels(cyl.factor))[cyl.factor]
new.cyl <- as.factor(c(6, 6, 4, 6, 8, 6, 8, 4, 4)
as.numeric(levels(new.cyl))
new.cyl
new.cyl <- as.factor(c(6, 6, 4, 6, 8, 6, 8, 4, 4)
new.cyl <- as.factor(c(6, 6, 4, 6, 8, 6, 8, 4, 4))
new.cyl
as.factor(c(6, 6, 4, 6, 8, 6, 8, 4, 4))
new.cyl <- as.factor(c(6, 6, 4, 6, 8, 6, 8, 4, 4))
new.cyl
as.numeric(levels(new.cyl))
levels(new.cyl)
as.numeric(levels(new.cyl))
as.numeric(levels(new.cyl))[new.cyl]
as.numeric(levels(new.cyl))[c(6, 6, 4, 6, 8, 6, 8, 4, 4)]
rm()
?rm
mean(x)
traceback()
rm(x)
mean(x)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(x~y)
debug(lm)
lm(x~y)
debug(lm)
lm(x~y)
options(error = recover)
read.csv("nosuchlife")
read.csv("nosuchlife")
"nosuchfile"
file()
"rt"
options(error = recover)
read.csv("nosuchlife")
read.csv("nosuchlife")
read.csv()
"nosuchfile"
0
read.csv("nosuchfile")
read.csv()
file
header
sep
quote
read.table()
file()
rt
"rt"
file
file()
header
rt
read.csv("nosuchlife")
2
file
header
rt
?gsub
undebug()
?gsub
logit <- function(x){
x <- ifelse(x < 0 | x > 1, "NA", x)
browser()
log(x / (1 - x) )
}
logit(50)
clients$type <- c('public','abroad','private','abroad')
clients <- c('public','abroad','private','abroad')
VAT <- numeric(0)  # to make sure 0 is 0L
for(i in clients){
VAT <- c(VAT,switch(i, private=1.12, public=1.06, 1))
}
VAT
VAT <- numeric(0)  # to make sure 0 is 0L
VAT
str(VAT)
clients <- c('public','abroad','private','abroad')
VAT <- numeric(0)  # to make sure 0 is 0L
for(i in clients){
VAT <- c(VAT,switch(i, private=1.12, public=1.06, 1))
}
VAT
str(VAT)
?apply
myClient <- c("private", "public", "other")
VAT <- sapply(myClient, switch, private=1.12, public=1.06, 1)
VAT
str(clients[c(1,3), ])
clients
clients <- data.frame(                 # two args formulate features of each client
hours = c(25, 110, 125, 40),         # There are four clients = four diff set of (two) args
public = c(TRUE,TRUE,FALSE,FALSE)
)
str(clients[c(1,3), ])
str(clients)
RSiteSearch("cluster analysis")
install.packages("sos")
library("sos")
library("sos")
require("sos")
sample(LETTERS[1:3], 12)
?ordered
?text
?lines
?fitted
?abline
?las
?plot
ggplot(mtcars, aes(x=hp, y=mpg)) + geom_point(color="red") +
xlab("Performance (horse power") +
ylab("Fuel consumption (mpg)") +
opts(title = "Motor car comparison")
require(ggplot2)
ggplot(mtcars, aes(x=hp, y=mpg)) + geom_point(color="red") +
xlab("Performance (horse power") +
ylab("Fuel consumption (mpg)") +
opts(title = "Motor car comparison")
traceback()
?ggplot
?theme
as.Date("27 July 2012", format="%d %B %Y")
traceback
traceback()
as.Date("27 July 2012", format="%d %B %Y")
traceback()
as.Date("27-July-2012", format="%d-%B-%Y")
?strptime
debug()
debug(as.POSIXct)
apollo <- "July 20, 1969, 20:17:39"
apollo.fmt <- "%B %d, %Y, %H:%M:%S"
xct <- as.POSIXct(apollo, format=apollo.fmt, tz="UTC")
xct
state.names
state
states
install.packages("stringr")
library(stringr)
states.names
??states.names
??state.names
data()
state.name
data()
data("basket")
?theme
require(ggplot2)
?theme
.libPaths()
library()
vignette(all=FALSE)
vignette(all=TRUE)
library(Matrix)
vignette(all=FALSE, package="Matrix")
vignette("Intro2Matrix")          # Show vignette
vign <- vignette("Intro2Matrix")  # Store vignette
edit(vign)
?text
letters[1:5]
?mtext
methods(str)
getAnywhere(str.data.frame)
?data.frame
data.frame
c
sum
.primitive("c")
methods(sum)
typeof
methods(typeof)
require(quantstrat)
applyStrategy
str
methods(str)
invisible
?invisible
.Primitive(invisible)
.Primitive('invisible')
get(invisible, envir = baseenv())
get("invisible", envir = baseenv())
invisible
oldClass
?oldClass
?invisible
NextMethod
?NextMethod
I
structure
match
replace
attrib
attrib
attributes
?attrib
??attrib
storage.mode
applyStrategy
c(NA, "a")
NA_real_
NA_integer_
typeof(NA_integer_)
typeof(c(NA, "a"))
NA_logical_
c(NA, "a") # NA is coerced into character
type(c(NA, "a"))
NA_real_
typeof(NA_real_) # double or numeric
NA_integer_
typeof(NA_integer_)
NA_character_
typeof(NA_character_)
?structure
list(1:3, c(1, 1, 3))
list(c(1, 2, 3), c(1, 1, 3))
l <- list(1:3, "a", TRUE, 1.0)
l
dim(l) <- c(4, 1)
l
dim(l) <- c(1, 4)
l
dim(l) <- c(2, 2)
l
l <- list(1:3, "a", TRUE, 1.0)
dim(l) <- c(1, 5)
data.frame(x = 1: 3, y = list(1: 2, 1: 3, 1: 4))
z <- c(abc = 1, def = 2)
z[c("a", "d")]
outer
?outer
?outer
typeof(NA)
typeof(NA_real_
)
?upper.tri
# mtcars[1:20]
# mtcars[c(1:20)]
mtcars[1:20]
mtcars[c(1:20)]
?diag
yourname <- readline("what's your name?")
ls()
getwd()
setwd(/R techniques)
setwd(~/R techniques)
setwd("C:/Users/Natusme/Desktop/TechniqueR/R techniques")
save(yourname, file = "yourname.rda")
rm(yourname)
ls()
load("yourname.rda")
ls()
firstnames <- c("Joris", "Carolien", "Koen")
lastname <- "Meys"
paste(firstnames, lastname)
authors <- c("Andrie", "Joris")
lastnames <- c("de Vries", "Meys")
paste(authors, lastnames)
print(digits = 4, x = 11/7)
savehistory("Chapter3.Rhistory")
